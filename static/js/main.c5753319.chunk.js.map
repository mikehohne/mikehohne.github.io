{"version":3,"sources":["pages/Landing.jsx","components/MainContainer.jsx","components/NavBar.jsx","pages/Portfolio/components/PortfolioDetail.jsx","pages/Portfolio/components/PortfolioList.jsx","pages/Portfolio/Portfolio.jsx","pages/Portfolio/PortfolioPageDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["Landing","Fragment","useStyles","makeStyles","theme","root","border","display","justifyContent","marginTop","spacing","height","MainContainer","props","classes","Container","className","maxWidth","children","toolBar","link","color","textDecoration","title","alignSelf","flexGrow","NavBar","AppBar","position","Toolbar","Typography","variant","to","Button","textAlign","cursor","PortfolioDetail","project","handleClick","Link","onClick","id","width","flexWrap","padding","paper","maxHeight","minWidth","listItem","projects","PortfolioList","navigate","history","push","find","proj","List","map","Paper","key","ListItem","Portfolio","PortfolioPageDetail","location","state","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5753319.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Landing = () => {\n  return (\n    <React.Fragment>\n      <div>Hello World</div>\n    </React.Fragment>\n  );\n};\n\nexport default Landing;\n","import React from 'react';\nimport { Container, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    border: '1px solid black',\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: theme.spacing(1),\n    height: '100vh'\n  }\n}));\n\nconst MainContainer = props => {\n  const classes = useStyles();\n  return (\n    <>\n      <Container className={classes.root} maxWidth='md'>\n        {props.children}\n      </Container>\n    </>\n  );\n};\n\nexport default MainContainer;\n","import React from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Button,\n  makeStyles,\n  Typography\n} from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  toolBar: {\n    display: 'flex'\n    // justifyContent: 'flex-end',\n    // alignItems: 'center'\n  },\n  link: {\n    color: 'white',\n    textDecoration: 'none'\n  },\n  title: {\n    alignSelf: 'initial',\n    flexGrow: 1\n  }\n}));\n\nconst NavBar = () => {\n  const classes = useStyles();\n  return (\n    <>\n      <AppBar className={classes.root} position='static'>\n        <Toolbar className={classes.toolBar}>\n          <Typography className={classes.title} variant='h6'>\n            <Link className={classes.link} to='/'>\n              Mike Hohne\n            </Link>\n          </Typography>\n          <Button>\n            <Link className={classes.link} to='/portfolio'>\n              Portfolio\n            </Link>\n          </Button>\n          <Button>\n            <Link className={classes.link} to='/test'>\n              Contact\n            </Link>\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport { Typography, Link } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    textAlign: 'center'\n  },\n  link: {\n    cursor: 'pointer',\n    '&:hover': {\n      textDecoration: 'none'\n    }\n  }\n}));\n\nconst PortfolioDetail = props => {\n  const { project, handleClick } = props;\n\n  function onSelect() {\n    handleClick(project.id);\n  }\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Link onClick={onSelect} className={classes.link}>\n        <Typography variant='h6'>{project.title}</Typography>\n      </Link>\n      <h1>H</h1>\n    </div>\n  );\n};\n\nexport default PortfolioDetail;\n","import React from 'react';\nimport { List, ListItem, makeStyles, Paper } from '@material-ui/core';\nimport PortfolioDetail from './PortfolioDetail';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-around',\n    flexWrap: 'wrap',\n    padding: '20px'\n  },\n  paper: {\n    maxHeight: '200px',\n    minWidth: '200px'\n  },\n  listItem: {\n    display: 'flex',\n    justifyContent: 'center'\n  }\n}));\n\nconst projects = [\n  { title: 'First', id: 'first' },\n  { title: 'Second', id: 'second' },\n  { title: 'Third', id: 'third' },\n  { title: 'Fourth', id: 'fourth' },\n  { title: 'Fifth', id: 'fifth' }\n];\n\nconst PortfolioList = props => {\n  const classes = useStyles();\n\n  function navigate(id) {\n    props.history.push(`/portfolio/${id}`, {\n      project: projects.find(proj => proj.id === id)\n    });\n  }\n  return (\n    <List className={classes.root}>\n      {projects.map(project => (\n        <Paper key={project.title} className={classes.paper}>\n          <ListItem className={classes.listItem}>\n            <PortfolioDetail handleClick={navigate} project={project} />\n          </ListItem>\n        </Paper>\n      ))}\n    </List>\n  );\n};\n\nexport default PortfolioList;\n","import React from 'react';\nimport PortfolioList from './components/PortfolioList';\n\nconst Portfolio = props => {\n  return <PortfolioList {...props} />;\n};\n\nexport default Portfolio;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '10px',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center'\n  }\n}));\n\nconst PortfolioPageDetail = props => {\n  const { project } = props.location.state;\n  const classes = useStyles();\n  return (\n    <>\n      <div className={classes.root}>\n        <Typography variant='h4'>{project.title}</Typography>\n      </div>\n    </>\n  );\n};\n\nexport default PortfolioPageDetail;\n","import React from 'react';\nimport './App.css';\nimport Landing from './pages/Landing';\nimport MainContainer from './components/MainContainer';\nimport NavBar from './components/NavBar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Portfolio from './pages/Portfolio/Portfolio';\nimport PortfolioPageDetail from './pages/Portfolio/PortfolioPageDetail';\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <NavBar />\n        <MainContainer>\n          <Switch>\n            <Route exact path='/' component={Landing} />\n            <Route exact path='/home' component={Landing} />\n            <Route exact path='/portfolio' component={Portfolio} />\n            <Route\n              exact\n              path='/portfolio/:id'\n              component={PortfolioPageDetail}\n            />\n          </Switch>\n        </MainContainer>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}